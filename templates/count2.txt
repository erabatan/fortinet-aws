"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system global",
								"set hostname {Hostname}",
								"set admintimeout 60",
								"end",
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode static",
								"set ip {Port1IP}/24",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"edit port2",
								"set alias private",
								"set mode static",
								"set ip {Port2IP}/24",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"edit port3",
								"set alias hasync",
								"set mode static",
								"set ip {Port3IP}/24",
								"set allowaccess ping",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"edit port4",
								"set alias hamgmt",
								"set mode static",
								"set ip {Port4IP}/24",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config router static",
								"edit 1",
								"set device port1",
								"set gateway {PublicSubnetRouterIP}",
								"next",
								"edit 2",
								"set dst {VPCCIDR}",
								"set device port2",
								"set gateway {PrivateSubnetRouterIP}",
								"next",
								"end",
								"config firewall policy",
								"edit 1",
								"set name outbound-all",
								"set srcintf port2",
								"set dstintf port1",
								"set srcaddr all",
								"set dstaddr all",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set logtraffic all",
								"set nat enable",
								"next",
								"end",
								"config system ha",
								"set group-name \"fortinet\"",
								"set group-id 1",
								"set password {HAsecret}",
								"set mode a-p",
								"set hbdev port3 50",
								"set session-pickup enable",
								"set ha-mgmt-status enable",
								"config ha-mgmt-interface",
								"edit 1",
								"set interface port4",
								"set gateway {HAmgmtSubnetRouterIP}",
								"next",
								"end",
								"set override disable",
								"set priority {HApriority}",
								"set unicast-hb enable",
								"set unicast-hb-peerip {HApeer}",
								"end\\",
								"'''",
								"",
								"def handler(event, context):",
								"    dict1 = ast.literal_eval(event['ResourceProperties']['FGTAInfo'])",
								"    dict2 = ast.literal_eval(event['ResourceProperties']['FGTBInfo'])",
								"    fgtA_conf = template.format(**dict1)",
								"    fgtB_conf = template.format(**dict2)",
								"    fgtA_result = False",
								"    fgtB_result = False",
								"    logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgtA_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgtA.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgtA_result = True",
								"        logger.info('<-- s3 put_object fgtA.txt successful')",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgtB_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgtB.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgtB_result = True",
								"        logger.info('<-- s3 put_object fgtB.txt successful')",
								"",
								"    if fgtA_result is True and fgtB_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""