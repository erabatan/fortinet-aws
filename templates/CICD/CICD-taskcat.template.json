{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Creates Pipeline and required resources for TaskCat CI. License: Apache 2.0 (Please do not remove)(qs-1ops82lkf)",
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Github configuration"
            },
            "Parameters": [
              "GitHubUser",
              "GitHubRepoName",
              "SourceRepoBranch",
              "GitHubOAuthToken"
            ]
          },
          {
            "Label": {
              "default": "Source configuration"
            },
            "Parameters": [
              "ArtifactBucket",
              "CleanTemplate"
            ]
          }
        ]
      }
    },
    "Parameters" : {
      "GitHubUser" : {
        "Description" : "Enter GitHub username of the repository owner",
        "Type" : "String"
      },
      "GitHubRepoName" : {
        "Description" : "Enter the repository name that should be monitored for changes",
        "Type" : "String"
      },
      "SourceRepoBranch" : {
        "Description" : "Enter the branch name to be monitored",
        "Type" : "String"
      },
      "GitHubOAuthToken" : {
        "Description" : "Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens",
        "Type" : "String",
        "NoEcho" : "true"
      },
      "ArtifactBucket": {
        "Type": "String",
        "MinLength": "1",
        "Description": "Provide the Init S3 Bucket name in this region, where your license files and config files exists"
      }
    },
    "Resources" : {
      "CodeBuildServiceRole" : {
        "Type" : "AWS::IAM::Role",
        "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Sid" : "",
              "Effect" : "Allow",
              "Principal" : {
                "Service" : "codebuild.amazonaws.com"
              },
              "Action" : "sts:AssumeRole"
            } ]
          },
          "Path" : "/",
          "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/AdministratorAccess" ],
          "RoleName": {
            "Fn::Sub" : "${AWS::StackName}-CodeBuildRole-${AWS::Region}"
          }
        }
      },
      "CodePipelineServiceRole" : {
        "Type" : "AWS::IAM::Role",
        "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Sid" : "",
              "Effect" : "Allow",
              "Principal" : {
                "Service" : "codepipeline.amazonaws.com"
              },
              "Action" : "sts:AssumeRole"
            } ]
          },
          "Path" : "/",
          "RoleName": {
            "Fn::Sub" : "${AWS::StackName}-CodePipelineRole-${AWS::Region}"
          },
          "Policies" : [ {
            "PolicyName" : {
              "Fn::Sub" : "${AWS::StackName}-CodePipelineService-${AWS::Region}"
            },
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [ {
                "Action" : [ "s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning", "s3:PutObject" ],
                "Resource" : [ {
                  "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}"
                }, {
                  "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}/*"
                } ],
                "Effect" : "Allow"
              }, {
                "Action" : [ "cloudformation:CreateStack", "cloudformation:DeleteStack", "cloudformation:DescribeStacks", "cloudformation:UpdateStack", "cloudformation:CreateChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:DescribeChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:SetStackPolicy", "cloudformation:ValidateTemplate", "iam:PassRole" ],
                "Resource" : "*",
                "Effect" : "Allow"
              }, {
                "Action" : [ "codebuild:BatchGetBuilds", "codebuild:StartBuild" ],
                "Resource" : "*",
                "Effect" : "Allow"
              } ]
            }
          } ]
        }
      },
      "CodePipeline" : {
        "Type" : "AWS::CodePipeline::Pipeline",
        "Properties" : {
          "ArtifactStore" : {
            "Type" : "S3",
            "Location" : {
              "Ref" : "ArtifactBucket"
            }
          },
          "RoleArn" : {
            "Fn::Join":["",[{"Fn::Sub":"arn:aws:iam::${AWS::AccountId}:role/"},{"Ref" : "CodePipelineServiceRole"}]]
          },
          "Stages" : [ 
            {
              "Name" : "Source",
              "Actions" : [ {
                "Name" : "GitHub",
                "InputArtifacts" : [ ],
                "ActionTypeId" : {
                  "Category" : "Source",
                  "Owner" : "ThirdParty",
                  "Version" : "1",
                  "Provider" : "GitHub"
                },
                "OutputArtifacts" : [ {
                  "Name" : "Source"
                } ],
                "Configuration" : {
                  "Owner" : {
                    "Ref" : "GitHubUser"
                  },
                  "Repo" : {
                    "Ref" : "GitHubRepoName"
                  },
                  "Branch" : {
                    "Ref" : "SourceRepoBranch"
                  },
                  "OAuthToken" : {
                    "Ref" : "GitHubOAuthToken"
                  }
                },
                "RunOrder" : 1
              } ]
            }, 
            {
              "Name" : "Build",
              "Actions" : [ {
                "Name" : "CodeBuild",
                "InputArtifacts" : [ {
                  "Name" : "Source"
                } ],
                "ActionTypeId" : {
                  "Category" : "Build",
                  "Owner" : "AWS",
                  "Version" : "1",
                  "Provider" : "CodeBuild"
                },
                "OutputArtifacts" : [ ],
                "Configuration" : {
                  "ProjectName" : {
                    "Ref" : "CodeBuild"
                  }
                },
                "RunOrder" : 2
              } ]
            } 
          ]
        }
      },
      "CodeBuild" : {
        "Type" : "AWS::CodeBuild::Project",
        "Properties" : {
          "Description" : {
            "Fn::Sub" : "Submit build jobs for ${GitHubRepoName} as part of CI/CD pipeline"
          },
          "ServiceRole" : {
            "Fn::Join":["",[{"Fn::Sub":"arn:aws:iam::${AWS::AccountId}:role/"},{"Ref" : "CodeBuildServiceRole"}]]
          },
          "Artifacts" : {
            "Type" : "CODEPIPELINE"
          },
          "Environment" : {
            "Type" : "LINUX_CONTAINER",
            "ComputeType" : "BUILD_GENERAL1_SMALL",
            "Image" : "aws/codebuild/python:3.6.5",
            "EnvironmentVariables" : [ {
              "Name" : "PROJECTNAME",
              "Value" : {
                "Fn::Sub" : "${GitHubRepoName}"
              }
            }, {
              "Name" : "GITHUBUSER",
              "Value" : {
                "Fn::Sub" : "${GitHubUser}"
              }
            }, {
              "Name" : "GITHUBTOKEN",
              "Value" : {
                "Fn::Sub" : "${GitHubOAuthToken}"
              }
            }, {
              "Name" : "SOURCEBRANCH",
              "Value" : {
                "Fn::Sub" : "${SourceRepoBranch}"
              }
            }, {
              "Name" : "ARTIFACT_BUCKET",
              "Value" : {
                "Ref" : "ArtifactBucket"
              }
            } ]
          },
          "Source" : {
            "Type" : "CODEPIPELINE",
            "BuildSpec" : {"Fn::Join":["",["version: 0.2\n\nphases:\n  install:\n    commands:\n      - echo Entered the install phase...\n      - apt-get update -y\n      - sudo apt-get install zip gzip tar -y\n      - pip3 install --upgrade pip\n      - ln -s /usr/local/bin/pip /usr/bin/pip\n  pre_build:\n    commands:\n      - echo Entered the pre_build phase...\n      - echo Current directory is $CODEBUILD_SRC_DIR\n      - ls -la\n      - export dirname=${PWD##*/}\n      - echo Directory name $dirname\n      - cd ..\n      - mv $dirname $PROJECTNAME\n      - ls -la\n      - cd $PROJECTNAME\n      - git config --global url.\"https://github.com/\".insteadOf \"git@github.com:\"\n      - git init\n      - git remote add origin https://$GITHUBTOKEN@github.com/$GITHUBUSER/$PROJECTNAME.git\n      - git fetch\n      - git checkout -ft origin/$SOURCEBRANCH\n      - git submodule init\n      - git submodule update --recursive\n      - ls -lR\n      - cd ..\n      - echo Installing Taskcat using pip3...\n      - pip install taskcat==0.8.36\n      - echo Verifying Taskcat installation...\n      - taskcat\n      - echo Configuring aws cli...\n      - aws configure set default.region ",{"Ref":"AWS::Region"},"\n  build:\n    commands:\n      - echo Entered the build phase...\n      - taskcat -N -c $PROJECTNAME/ci/taskcat.yml\n      - ls -1 taskcat_outputs\n      - ls -1 taskcat_outputs | while read LOG; do cat taskcat_outputs/${LOG}; done\n      - echo Zipping and uploading report to $ARTIFACT_BUCKET S3 bucket\n      - zip -r taskcat_report.zip taskcat_outputs\n      - aws s3 cp taskcat_report.zip s3://$ARTIFACT_BUCKET/taskcat_reports/$CODEBUILD_BUILD_ID.zip\n      - |\n        if $(grep -Fq \"CREATE_FAILED\" taskcat_outputs/index.html)\n        then\n          echo Quickstart FAILED!\n          exit 1\n        else\n          echo Quickstart Passed!\n          exit 0\n        fi\n"]]}
          }
        }
      },
      "LambdaRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Path": "/"
        }
      },
      "LambdaPolicy": {
        "DependsOn": [
          "LambdaRole"
        ],
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "LambdaPolicy",
          "Roles": [{
            "Ref": "LambdaRole"
          }],
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "codepipeline:StartPipelineExecution"
              ],
              "Resource": [
                "*"
              ]
            }]
          }
        }
      },
      "APIgwMethod": {
        "DependsOn": "PermissionForAPIGatewayToEnvokeLambda",
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "ApiKeyRequired": true,
          "HttpMethod": "POST",
          "Integration": {
            "Type": "AWS",
            "IntegrationHttpMethod": "POST",
            "Uri": {
              "Fn::Join": ["", ["arn:aws:apigateway:", {
                "Ref": "AWS::Region"
              }, ":lambda:path/2015-03-31/functions/", {
                "Fn::GetAtt": ["LambdaLaunchPipeline", "Arn"]
              }, "/invocations"]]
            },
            "IntegrationResponses": [{
              "StatusCode": 200
            }]
          },
          "ResourceId": {"Ref": "APIgwResource"},
          "RestApiId": {"Ref": "APItoLambda"}
        }
      },
      "LambdaLaunchPipeline": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
          "LambdaRole",
          "LambdaPolicy"
        ],
        "Properties": {
          "Code": {
            "ZipFile": {
              "Fn::Join": [
                "\n",
                [
                  "import json",
                  "import boto3",
                  "client = boto3.client('codepipeline')",
                  "",
                  "def handler(event,context):",
                  "    response = client.start_pipeline_execution(",
                  {"Fn::Join":["",["    name='",{"Ref":"CodePipeline"},"',"]]},
                  "    )",
                  "    if response['ResponseMetadata']['HTTPStatusCode'] == 200:",
                  "        return {",
                  "            'statusCode':200,",
                  "            'body': json.dumps('LaunchCodePipeline ok')",
                  "        }",
                  "    else:",
                  "        return {",
                  "            'statusCode':400,",
                  "            'body': json.dumps('LaunchCodePipeline ERROR')",
                  "        }",
                  ""
                ]
              ]
            }
          },
          "Description": "this lambda function starts the codepipeline",
          "FunctionName": "launchPipeline",
          "Handler": "index.handler",
          "Role": {
            "Fn::GetAtt": [
              "LambdaRole",
              "Arn"
            ]
          },
          "Runtime": "python3.6",
          "Timeout": 60
        }
      },
      "APItoLambda": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "Name": "API-to-Lambda",
          "Description": "API used to launch lambda function LaunchPipeline",
          "ApiKeySourceType": "HEADER",
          "FailOnWarnings": true
        }
      },
      "CodeAPIAccount": {
        "Type": "AWS::ApiGateway::Account",
        "Properties": {
          "CloudWatchRoleArn": {
            "Fn::GetAtt": ["CodeAPIRole", "Arn"]
          }
        }
      },
      "CodeAPIRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": ["apigateway.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }]
          },
          "Policies": [{
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:FilterLogEvents"
                ],
                "Resource": "*"
              }]
            }
          }]
        }
      },
      "CodeAPIKey": {
        "Type": "AWS::ApiGateway::ApiKey",
        "DependsOn": ["CodeApiDeployment"],
        "Properties": {
          "Name": {
            "Fn::Join": [
              "", [{
                  "Ref": "AWS::StackName"
                },
                "-CodeAPIKey"
              ]
            ]
          },
          "Description": "CodeAPIKey",
          "Enabled": "true",
          "StageKeys": [{
            "RestApiId": {
              "Ref": "APItoLambda"
            },
            "StageName": "prod"
          }]
        }
      },
      "PermissionForAPIGatewayToEnvokeLambda": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": ["LambdaLaunchPipeline", "Arn"]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": ["", ["arn:aws:execute-api:", {
              "Ref": "AWS::Region"
            }, ":", {
              "Ref": "AWS::AccountId"
            }, ":", {
              "Ref": "APItoLambda"
            }, "/*"]]
          }
        }
      },
      "CodeApiDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": ["APIgwMethod"],
        "Properties": {
          "RestApiId": {"Ref": "APItoLambda"},
          "StageName": "prod"
        }
      },
      "CodeApiUsagePlan": {
        "DependsOn": ["CodeApiDeployment"],
        "Type": "AWS::ApiGateway::UsagePlan",
        "Properties": {
          "ApiStages": [{
            "ApiId": {
              "Ref": "APItoLambda"
            },
            "Stage": "prod"
          }],
          "Description": "CodeApiUsagePlan",
          "UsagePlanName": {
            "Fn::Join": [
              "", [{
                  "Ref": "AWS::StackName"
                },
                "-CodeApiUsagePlan"
              ]
            ]
          }
        }
      },
      "CodeApiUsagePlanKey": {
        "Type": "AWS::ApiGateway::UsagePlanKey",
        "Properties": {
          "KeyId": {
            "Ref": "CodeAPIKey"
          },
          "KeyType": "API_KEY",
          "UsagePlanId": {
            "Ref": "CodeApiUsagePlan"
          }
        }
      },
      "APIgwResource": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "RestApiId": {"Ref": "APItoLambda"},
          "ParentId": {"Fn::GetAtt": ["APItoLambda", "RootResourceId"]},
          "PathPart": "launchpipeline"
        }
      }
    }
  }