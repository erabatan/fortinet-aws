{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {},
  "Description": "AWS CloudFormation Template to launch VPC with a public subnet from which a Fortiweb device will protect a Saas application",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "VPC Configuration"
          },
          "Parameters": [
            "VPCCIDR",
            "AZForSubnet1",
            "AZForSubnet2",
            "PublicSubnet1",
            "PublicSubnet2",
            "DomainToProtect",
            "port",
            "SSL",
            "KeyPair",
            "HAsecret"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "VPCCIDR": {
      "Default": "10.1.0.0/16",
      "Description": "Enter the VPC CIDR that you want to use",
      "Type": "String"
    },
    "AZ1ForSubnet": {
      "Description": "Enter the AZ 1 for the primary public subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "PublicSubnet1": {
      "Default": "10.1.1.0/24",
      "Description": "Enter the value of the primary Public subnet",
      "Type": "String"
    },
    "AZ2ForSubnet": {
      "Description": "Enter the AZ 2 for the backup public subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "PublicSubnet2": {
      "Default": "10.1.2.0/24",
      "Description": "Enter the value of the backup Public subnet",
      "Type": "String"
    },
    "domain": {
      "Default": "www.fortinet.com",
      "Description": "Enter the name of the domain you want to protect (without http(s))",
      "Type": "String"
    },
    "port": {
      "Default": "443",
      "Description": "Enter the default port for the application (80, 443, ...)",
      "Type": "String"
    },
    "ssl": {
      "AllowedValues": [
        "yes",
        "no"
      ],
      "Default": "yes",
      "Description": "enable SSL between the fortiweb unit and the protected server",
      "Type": "String"
    },
    "CIDRForFortiGateAccess": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "Enter the CIDR from which FortiGate instances needs to be accessed"
    },
    "InitialFWBInstanceType": {
      "Type": "String",
      "Default": "c5.xlarge",
      "AllowedValues": [
	      "c5.xlarge",
	      "m4.large",
        "m4.xlarge",
        "c4.large",
        "c4.xlarge",
        "m5.large",
        "m5.xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the initial Fortiweb"
    },
    "KeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the keypair that you want to associate with the launch of any device for console access"
    },
    "HAsecret": {
      "Type": "String",
      "Description": "Enter any HA password to authenticate the instances in the cluster"
    }
  },
  "Mappings": {
		"RegionMap": {
			"us-east-1": {
				"LambdaCode": "fortis3emea-us-east-1",
        "FWBimage":"ami-00000000000000000"
			},
			"us-east-2": {
				"LambdaCode": "fortis3emea-us-east-2",
        "FWBimage":"ami-00000000000000000"
			},
      "us-west-1": {
				"LambdaCode": "fortis3emea-us-west-1",
        "FWBimage":"ami-00000000000000000"
			},
			"us-west-2": {
				"LambdaCode": "fortis3emea-us-west-2",
        "FWBimage":"ami-00000000000000000"
			},
			"eu-west-1": {
				"LambdaCode": "fortis3emea-eu-west-1",
        "FWBimage":"ami-00000000000000000"
			},
			"eu-west-2": {
				"LambdaCode": "fortis3emea-eu-west-2",
        "FWBimage":"ami-0eabb54e10fc0b63d"
			},
			"eu-west-3": {
				"LambdaCode": "fortis3emea-eu-west-3",
        "FWBimage":"ami-00000000000000000"
			},
			"eu-central-1": {
				"LambdaCode": "fortis3emea-eu-central-1",
        "FWBimage":"ami-00000000000000000"
			},
      "eu-north-1": {
        "LambdaCode": "fortis3emea-eu-north-1",
        "FWBimage":"ami-00000000000000000"
      },
			"ap-northeast-1": {
				"LambdaCode": "fortis3emea-ap-northeast-1",
        "FWBimage":"ami-00000000000000000"
			},
			"ap-northeast-2": {
				"LambdaCode": "fortis3emea-ap-northeast-2",
        "FWBimage":"ami-00000000000000000"
			},
			"ap-southeast-1": {
				"LambdaCode": "fortis3emea-ap-southeast-1",
        "FWBimage":"ami-00000000000000000"
			},
			"ap-southeast-2": {
				"LambdaCode": "fortis3emea-ap-southeast-2",
        "FWBimage":"ami-00000000000000000"
			},
			"ap-south-1": {
				"LambdaCode": "fortis3emea-ap-south-1",
        "FWBimage":"ami-00000000000000000"
			},
			"sa-east-1": {
				"LambdaCode": "fortis3emea-sa-east-1",
        "FWBimage":"ami-00000000000000000"
			},
			"ca-central-1": {
				"LambdaCode": "fortis3emea-ca-central-1",
        "FWBimage":"ami-00000000000000000"
			}
		}
	},
  "Resources": {
      "VPCID": {
       "Properties": {
         "CidrBlock": {
           "Ref": "VPCCIDR"
         },
         "Tags": [
           {
             "Key": "Name",
             "Value": {
               "Fn::Join": [
                 "",
                 [
                   {
                     "Ref": "AWS::StackName"
                   },
                   "-VPC"
                 ]
               ]
             }
           },
           {
	      "Key": "Project",
              "Value":"test"
           }
         ]
       },
       "Type": "AWS::EC2::VPC"
     },
     "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-IGW"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "PubRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PubRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PubRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-PubRoute"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PubSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AZ1ForSubnet"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PubSubnet2": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AZ2ForSubnet"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "SubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PubRouteTable"
        },
        "SubnetId": {
          "Ref": "PubSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetRouteTableAssociation2": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PubRouteTable"
        },
        "SubnetId": {
          "Ref": "PubSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Allow Admin Traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "6",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          },
          {
            "IpProtocol": "6",
            "FromPort": "8443",
            "ToPort": "8443",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          }
        ]
      }
    },
    "FortiwebA": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["RegionMap", {
            "Ref": "AWS::Region"
          }, "FWBimage"]
        },
        "InstanceType": {
          "Ref": "InitialFWBInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "DisableApiTermination": "False",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "FWBAENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "FortiWebA"
          },
          {
            "Key": "DeviceType",
            "Value": "FortiWeb"
          },
          {
            "Key": "role",
            "Value": "master"
          }
        ]
      }
    },
    "FortiwebB": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["RegionMap", {
            "Ref": "AWS::Region"
          }, "FWBimage"]
        },
        "InstanceType": {
          "Ref": "InitialFWBInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "DisableApiTermination": "False",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "FWBBENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "FortiWebB"
          },
          {
            "Key": "DeviceType",
            "Value": "FortiWeb"
          },
          {
            "Key": "role",
            "Value": "slave"
          }
        ]
      }
    },
    "FWBAENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "PubSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-FWBAENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "FWBBENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "PubSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-FWBBENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "EIPA": {
      "Type": "AWS::EC2::EIP",
      "DependsOn" : "InternetGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "EIPAassociation": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId" : {
          "Fn::GetAtt" : [ "EIPA", "AllocationId" ]
	    },
        "NetworkInterfaceId": {
	      "Ref": "FWBAENI0"
        }
      }
    },
    "EIPB": {
      "Type": "AWS::EC2::EIP",
        "Properties": {
        "Domain": "vpc"
      }
    },
    "EIPBassociation": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId" : {
	      "Fn::GetAtt" : [ "EIPB", "AllocationId" ]
	    },
        "NetworkInterfaceId": {
	      "Ref": "FWBBENI0"
        }
      }
    },
    "ConfigLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "ConfigLambdaPolicy": {
			"DependsOn": [
				"ConfigLambdaRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "ConfigLambdaPolicy",
				"Roles": [{
					"Ref": "ConfigLambdaRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": "ec2:*",
						"Resource": [
							"*"
						]
					}]
				}
			}
		},
    "LambdaConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile" : { "Fn::Join" : ["\n", [
            "import json",
            "",
            "def lambda_handler(event, context):",
            "   responseValue = int(event['ResourceProperties']['Input']) * 5",
            "   responseData = {}",
            "   responseData['Data'] = responseValue",
            "   cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")"
          ]]}
				},
        "Description": "this lambda function configures Fortiweb at initial boot",
        "FunctionName": "configFortiweb",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
						"ConfigLambdaRole",
						"Arn"
					]
        },
        "Runtime": "python3.7",
        "Timeout": 60
      }
    }
  },
  "Environment":{  
    "Variables":{  
      "ObjectName":{  
        "Ref":"AWS::StackName"
      }
    }
  },
  "Outputs": {
    "FortiWebAAdminURL":{
          "Description": "Access to the FortiwebA device (admin / <device instance id> )",
          "Value": {
    				"Fn::Join": ["", ["https://", {"Ref": "EIPA"}]]
    			}
    },
    "FortiWebBAdminURL":{
      "Description": "Access to the FortiwebB device (admin / <device instance id> )",
      "Value": {
        "Fn::Join": ["", ["https://", {"Ref": "EIPB"}]]
      }
    }
  }
}
