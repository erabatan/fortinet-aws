{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {},
  "Description": "AWS CloudFormation Template to launch a VPC with two subnets, a host which generates compromised devices + 2 testing devices + FortiGate",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "VPC Configuration"
          },
          "Parameters": [
            "VPCCIDR",
            "AZForSubnet",
            "PubSub",
            "PriSub",
            "KeyPair"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "AZForSubnet": {
      "Description": "Enter the AZ for the primary subnets",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "PriSub": {
      "Default": "10.1.11.0/24",
      "Description": "Enter the value of the Private subnet",
      "Type": "String"
    },
    "PubSub": {
      "Default": "10.1.1.0/24",
      "Description": "Enter the value of the Public subnet",
      "Type": "String"
    },
    "VPCCIDR": {
      "Default": "10.1.0.0/16",
      "Description": "Enter the VPC CIDR that you want to use",
      "Type": "String"
    },
    "CIDRForFortiGateAccess": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "Enter the CIDR from which FortiGate instances needs to be accessed"
    },
    "InitialFGTInstanceType": {
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
	    "t2.small",
	    "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the Initial FortiGates"
    },
    "KeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the keypair that you want to associate with the launch of any device for console access"
    }
  },
  "Mappings": {
		"RegionMap": {
			"us-east-1": {
				"LambdaCode": "fortis3emea-us-east-1",
        "FGTimage":"ami-09e4f25ec992c94ab",
        "testdevicelinux":"ami-b70554c8",
        "comphostserver":"ami-07b63ae2633b4e1bb"
			},
			"us-east-2": {
				"LambdaCode": "fortis3emea-us-east-2",
        "FGTimage":"ami-0a1f403f5e0cfa88e",
        "testdevicelinux":"ami-8c122be9",
        "comphostserver":"ami-0fa759d0721d4117b"
			},
      "us-west-1": {
				"LambdaCode": "fortis3emea-us-west-1",
        "FGTimage":"ami-057300bd7e60ea2b2",
        "testdevicelinux":"ami-e0ba5c83",
        "comphostserver":"ami-03a2fa5f840592bab"
			},
			"us-west-2": {
				"LambdaCode": "fortis3emea-us-west-2",
        "FGTimage":"ami-0ea3f14da73832fdc",
        "testdevicelinux":"ami-a9d09ed1",
        "comphostserver":"ami-03da41b5d18dfb6df"
			},
			"eu-west-1": {
				"LambdaCode": "fortis3emea-eu-west-1",
        "FGTimage":"ami-0aeda1bdca1b205bd",
        "testdevicelinux":"ami-466768ac",
        "comphostserver":"ami-024b4888fbf20e4b1"
			},
			"eu-west-2": {
				"LambdaCode": "fortis3emea-eu-west-2",
        "FGTimage":"ami-0de7050ef166ab900",
        "testdevicelinux":"ami-b8b45ddf",
        "comphostserver":"ami-009dcabdffcfce2a9"
			},
			"eu-west-3": {
				"LambdaCode": "fortis3emea-eu-west-3",
        "FGTimage":"ami-0ce86abfa74c76ad2",
        "testdevicelinux":"ami-2cf54551",
        "comphostserver":"ami-02319a01260001c14"
			},
			"eu-central-1": {
				"LambdaCode": "fortis3emea-eu-central-1",
        "FGTimage":"ami-0af055c02be246473",
        "testdevicelinux":"ami-7c4f7097",
        "comphostserver":"ami-00f7e316654e6287e"
			},
      "eu-north-1": {
        "LambdaCode": "fortis3emea-eu-north-1",
        "FGTimage":"ami-9f33bce1",
        "testdevicelinux":"ami-07ec6279",
        "comphostserver":"ami-0a2f845731add7105"
      },
			"ap-northeast-1": {
				"LambdaCode": "fortis3emea-ap-northeast-1",
        "FGTimage":"ami-0bd9e6e0020928ef9",
        "testdevicelinux":"ami-e99f4896",
        "comphostserver":"ami-08945655c2f5eb993"
			},
			"ap-northeast-2": {
				"LambdaCode": "fortis3emea-ap-northeast-2",
        "FGTimage":"ami-0a560b6c089c6310a",
        "testdevicelinux":"ami-afd86dc1",
        "comphostserver":"ami-0cc16244a7540e58b"
			},
			"ap-southeast-1": {
				"LambdaCode": "fortis3emea-ap-southeast-1",
        "FGTimage":"ami-000c0166f49864e4a",
        "testdevicelinux":"ami-05868579",
        "comphostserver":"ami-08df9eede136452c9"
			},
			"ap-southeast-2": {
				"LambdaCode": "fortis3emea-ap-southeast-2",
        "FGTimage":"ami-0e3662b3f822e3be4",
        "testdevicelinux":"ami-39f8215b",
        "comphostserver":"ami-021cecf4fa2d4b573"
			},
			"ap-south-1": {
				"LambdaCode": "fortis3emea-ap-south-1",
        "FGTimage":"ami-0c5a28e0b56028d6d",
        "testdevicelinux":"ami-d783a9b8",
        "comphostserver":"ami-0f5c8db7aaf45e70d"
			},
			"sa-east-1": {
				"LambdaCode": "fortis3emea-sa-east-1",
        "FGTimage":"ami-0424ffd602f0af643",
        "testdevicelinux":"ami-6dca9001",
        "comphostserver":"ami-08c41e0da35b218f1"
			},
			"ca-central-1": {
				"LambdaCode": "fortis3emea-ca-central-1",
        "FGTimage":"ami-0583f62d15a462f5c",
        "testdevicelinux":"ami-0ee86a6a",
        "comphostserver":"ami-06f67112c074abae1"
			}
		}
	},
  "Resources": {
      "VPCID": {
       "Properties": {
         "CidrBlock": {
           "Ref": "VPCCIDR"
         },
         "Tags": [
           {
             "Key": "Name",
             "Value": {
               "Fn::Join": [
                 "",
                 [
                   {
                     "Ref": "AWS::StackName"
                   },
                   "-VPC"
                 ]
               ]
             }
           },
           {
	      "Key": "Project",
              "Value":"Demo"
           }
         ]
       },
       "Type": "AWS::EC2::VPC"
     },
     "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-IGW"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "PubRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PubRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PriRoute": {
      "DependsOn": "FGT1ENI1",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "FGT1ENI1"
        },
        "RouteTableId": {
          "Ref": "PriRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PubRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-PubRoute"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PriRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-PriRoute"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PubSub1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AZForSubnet"
        },
        "CidrBlock": {
          "Ref": "PubSub"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PubSub1"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PriSub1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AZForSubnet"
        },
        "CidrBlock": {
          "Ref": "PriSub"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PriSub1"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "SubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PubRouteTable"
        },
        "SubnetId": {
          "Ref": "PubSub1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetRouteTableAssociation2": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PriRouteTable"
        },
        "SubnetId": {
          "Ref": "PriSub1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "s3.amazonaws.com",
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "AddQuarLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "AddQuarLambdaPolicy": {
			"DependsOn": [
				"AddQuarLambdaRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "AddQuarLambdaPolicy",
				"Roles": [{
					"Ref": "AddQuarLambdaRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
              "logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"ec2:DescribeInstances",
							"ec2:CreateTags"
						],
						"Resource": [
							"*"
						]
					}]
				}
			}
		},
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Allow Admin Traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "6",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          },
          {
            "IpProtocol": "6",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          }
        ]
      }
    },
    "SecurityGroupUbuntu": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Allow SSH and HTTP 8080",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "6",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          },
          {
            "IpProtocol": "6",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          }
        ]
      }
    },
    "testdevice1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"testdevicelinux"
					]
				},
        "InstanceType": "t2.small",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "testdeviceENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "testdevice1"
          }
        ]
      }
    },
    "testdeviceENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "True",
        "SubnetId": {
          "Ref": "PriSub1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-testENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "testdevice2": {
        "DependsOn" : "FGT1",
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "ImageId": {
    					"Fn::FindInMap": [
    						"RegionMap",
    						{
    							"Ref": "AWS::Region"
    						},
    						"testdevicelinux"
    					]
    				},
            "InstanceType": "t2.small",
            "KeyName": {
                "Ref": "KeyPair"
            },
            "IamInstanceProfile": {
                "Ref": "IAMInstanceProfile"
            },
            "NetworkInterfaces": [
                {
                  "NetworkInterfaceId": {
                    "Ref": "testdevice2ENI0"
                  },
                  "DeviceIndex": "0"
                }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "testdevice2"
              }
            ]
        }
    },
    "testdevice2ENI0": {
        "Type": "AWS::EC2::NetworkInterface",
        "Properties": {
            "Description": "eth0",
            "GroupSet": [
                         {
                            "Ref": "SecurityGroup"
                         }
                        ],
            "SourceDestCheck": "True",
            "SubnetId": {
                "Ref": "PriSub1"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": {
                    "Fn::Join": [
                                  "",
                                  [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                        "-test2ENI0"
                                  ]
                    ]
                    }
                },
                {
                    "Key": "Interface",
                    "Value": "eth0"
                }
            ]
        }
    },
    "UbuntuCprHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"comphostserver"
					]
				},
        "InstanceType": "t2.small",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "ubuntuENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "UbuntuCompromiseHosts"
          }
        ]
      }
    },
    "ubuntuENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroupUbuntu"
          }
        ],
        "SourceDestCheck": "True",
        "SubnetId": {
          "Ref": "PubSub1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-ubuntuENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "FGT1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["RegionMap", {
            "Ref": "AWS::Region"
          }, "FGTimage"]
        },
        "InstanceType": {
          "Ref": "InitialFGTInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "DisableApiTermination": "False",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "FGT1ENI0"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "FGT1ENI1"
            },
            "DeviceIndex": "1"
          }
        ],
        "UserData": {
					"Fn::Base64": {
						"Fn::Join": ["\n", [
							"config system global",
							"set hostname FGT-SDNAutomationDEMO",
							"set admintimeout 60",
							"end",
							"config system interface",
              "edit \"port1\"",
              "set vdom \"root\"",
              "set mode dhcp",
              "set allowaccess ping https ssh fgfm",
              "set alias \"public\"",
              "next",
              "edit \"port2\"",
              "set vdom \"root\"",
              "set mode dhcp",
              "set defaultgw disable",
              "set allowaccess ping https ssh fgfm",
              "set alias \"private\"",
              "next",
              "end",
              "config system automation-trigger",
              "edit \"Addquarantine\"",
              "next",
              "end",
              "config system automation-action",
              "edit \"Addquarantine\"",
              "set action-type aws-lambda",
              "set aws-api-path \"apiaddquarantine\"",
              "set aws-api-stage \"prod\"",
              { "Fn::Join" : [ "", [ "set aws-region \"",{"Ref": "AWS::Region"},"\""]]},
              { "Fn::Join" : [ "", [ "set aws-api-id \"",{"Ref": "APItoLambda"},"\""]]},
              "set aws-api-key \"yourapikeyhere\"",
              "end",
              "config system automation-stitch",
              "edit \"Addquarantine\"",
              "set trigger \"Addquarantine\"",
              "set action \"Addquarantine\"",
              "end",
              "config system sdn-connector",
              "edit \"SDNquarantine\"",
              "set type aws",
              "set access-key \"youraccesskeyhere\"",
              "set secret-key \"yoursecretkeyhere\"",
              { "Fn::Join" : [ "", [ "set region \"",{"Ref": "AWS::Region"},"\""]]},
              { "Fn::Join" : [ "", [ "set vpc-id \"",{"Ref": "VPCID"},"\""]]},
              "set update-interval 1",
              "next",
              "end",
              "config firewall address",
              "edit \"tobequarantined\"",
              "set type dynamic",
              "set sdn aws",
              "set filter \"Tag.Status=tobequarantined\"",
              "end",
              "config firewall policy",
              "edit 1",
              "set name \"denyquarantinedhosts\"",
              "set srcintf \"port2\"",
              "set dstintf \"port1\"",
              "set srcaddr \"tobequarantined\"",
              "set dstaddr \"all\"",
              "set schedule \"always\"",
              "set service \"ALL\"",
              "next",
              "edit 2",
              "set name \"allowall\"",
              "set srcintf \"port2\"",
              "set dstintf \"port1\"",
              "set srcaddr \"all\"",
              "set dstaddr \"all\"",
              "set action accept",
              "set schedule \"always\"",
              "set service \"ALL\"",
              "set utm-status enable",
              "set av-profile \"default\"",
              "set webfilter-profile \"default\"",
              "set dnsfilter-profile \"default\"",
              "set ips-sensor \"default\"",
              "set application-list \"default\"",
              "set ssl-ssh-profile \"certificate-inspection\"",
              "set nat enable",
              "next",
              "end",
              "config log memory setting",
              "set status enable",
              "end",
              "config log disk setting",
              "set status enable",
              "end"
						]]
					}
				},
        "Tags": [
          {
            "Key": "Name",
            "Value": "Fortigate"
          }
        ]
      }
    },
    "FGT1ENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PubSub1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-FGT1ENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "FGT1ENI1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth1",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PriSub1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-FGT1ENI1"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth1"
          }
        ]
      }
    },
    "EIP1": {
      "Type": "AWS::EC2::EIP",
      "DependsOn" : "InternetGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "EIP1association": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId" : {
          "Fn::GetAtt" : [ "EIP1", "AllocationId" ]
	    },
        "NetworkInterfaceId": {
	      "Ref": "FGT1ENI0"
        }
      }
    },
    "EIP2": {
      "Type": "AWS::EC2::EIP",
        "Properties": {
        "Domain": "vpc"
      }
    },
    "EIP2association": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId" : {
	      "Fn::GetAtt" : [ "EIP2", "AllocationId" ]
	    },
        "NetworkInterfaceId": {
	      "Ref": "ubuntuENI0"
        }
      }
    },
    "APIgwMethod": {
      "DependsOn": "PermissionForAPIGatewayToEnvokeLambda",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "ApiKeyRequired": true,
        "HttpMethod": "POST",
        "Integration": {
					"Type": "AWS",
					"IntegrationHttpMethod": "POST",
					"Uri": {
						"Fn::Join": ["", ["arn:aws:apigateway:", {
							"Ref": "AWS::Region"
						}, ":lambda:path/2015-03-31/functions/", {
							"Fn::GetAtt": ["LambdaAddQuarantine", "Arn"]
						}, "/invocations"]]
					},
					"IntegrationResponses": [{
						"StatusCode": 200
					}]
				},
        "ResourceId": {"Ref": "APIgwResource"},
        "RestApiId": {"Ref": "APItoLambda"}
      }
    },
    "LambdaAddQuarantine": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
				"AddQuarLambdaRole",
				"AddQuarLambdaPolicy"
			],
      "Properties": {
        "Code": {
					"S3Bucket": {
						"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "LambdaCode"]
					},
					"S3Key": "addquarantine.zip"
				},
        "Description": "this lambda function tags compromised hosts with tag tobequarantined",
        "FunctionName": "add-quarantine",
        "Handler": "addquarantine.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
						"AddQuarLambdaRole",
						"Arn"
					]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "APItoLambda": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "API-to-Lambda",
        "Description": "API used to launch lambda function LambdaAddQuarantine",
        "ApiKeySourceType": "HEADER",
        "FailOnWarnings": true
      }
    },
    "SDNAPIAccount": {
			"Type": "AWS::ApiGateway::Account",
			"Properties": {
				"CloudWatchRoleArn": {
					"Fn::GetAtt": ["SDNAPIRole", "Arn"]
				}
			}
		},
    "SDNAPIRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["apigateway.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Policies": [{
					"PolicyName": "ApiGatewayLogsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:DescribeLogGroups",
								"logs:DescribeLogStreams",
								"logs:PutLogEvents",
								"logs:GetLogEvents",
								"logs:FilterLogEvents"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
    "SDNAPIKey": {
			"Type": "AWS::ApiGateway::ApiKey",
			"DependsOn": ["SDNApiDeployment"],
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-SDNAPIKey"
						]
					]
				},
				"Description": "SDNAPIKey",
				"Enabled": "true",
				"StageKeys": [{
					"RestApiId": {
						"Ref": "APItoLambda"
					},
					"StageName": "prod"
				}]
			}
		},
    "PermissionForAPIGatewayToEnvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:invokeFunction",
				"FunctionName": {
					"Fn::GetAtt": ["LambdaAddQuarantine", "Arn"]
				},
				"Principal": "apigateway.amazonaws.com",
				"SourceArn": {
					"Fn::Join": ["", ["arn:aws:execute-api:", {
						"Ref": "AWS::Region"
					}, ":", {
						"Ref": "AWS::AccountId"
					}, ":", {
						"Ref": "APItoLambda"
					}, "/*"]]
				}
			}
		},
    "SDNApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["APIgwMethod"],
      "Properties": {
        "RestApiId": {"Ref": "APItoLambda"},
        "StageName": "prod"
      }
    },
    "SDNApiUsagePlan": {
			"DependsOn": ["SDNApiDeployment"],
			"Type": "AWS::ApiGateway::UsagePlan",
			"Properties": {
				"ApiStages": [{
					"ApiId": {
						"Ref": "APItoLambda"
					},
					"Stage": "prod"
				}],
				"Description": "SDNApiUsagePlan",
				"UsagePlanName": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-SDNApiUsagePlan"
						]
					]
				}
			}
		},
		"SDNApiUsagePlanKey": {
			"Type": "AWS::ApiGateway::UsagePlanKey",
			"Properties": {
				"KeyId": {
					"Ref": "SDNAPIKey"
				},
				"KeyType": "API_KEY",
				"UsagePlanId": {
					"Ref": "SDNApiUsagePlan"
				}
			}
		},
    "APIgwResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "APItoLambda"},
        "ParentId": {"Fn::GetAtt": ["APItoLambda", "RootResourceId"]},
        "PathPart": "apiaddquarantine"
      }
    }
  },
  "Outputs": {
    "FortigateAdminURL":{
          "Description": "Access to the Fortigate device (admin / <device instance id> )",
          "Value": {
    				"Fn::Join": ["", ["https://", {"Ref": "EIP1"}]]
    			}
    },
		"SDNAPIURL": {
			"Description": "AWS API Gateway URL",
			"Value": {
				"Fn::Join": ["", ["https://", {
					"Ref": "APItoLambda"
				}, ".execute-api.", {
					"Ref": "AWS::Region"
				}, ".amazonaws.com", "/prod/apiaddquarantine"]]
			}
		},
		"SDNAPIKey": {
			"Description": "AWS API Key ID (get actual key value from AWS console)",
			"Value": {
				"Ref": "SDNAPIKey"
			}
		}
  }
}
